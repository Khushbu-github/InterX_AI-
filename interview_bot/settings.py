"""
Django settings for interview_bot project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

import dj_database_url
import environ
env = environ.Env(
    DEBUG=(bool, False),
    ENVIRONMENT=(str, 'production'),
    POSTGRES_LOCALLY=(bool, False),
    REDIS_URL=(str, 'redis://localhost:6379'),
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY=(str, ''),
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=(str, ''),
    SECRET_KEY=(str, 'default-secret-key-for-dev'),
    DATABASE_URL=(str, ''),
)



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)d$x3zh8y#qln!yc2wt4-3m29_utd$^rfylqji%ley!ls8(-k4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('ENVIRONMENT', 'Production').lower() == 'local'

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['https://*.up.railway.app',
    'https://*.railway.app',]
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SITE_ID=2
# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bot',
    'users',
    'groupchat',
    'simpleinterview',
    'social_django',
    # 'django.contrib.sites',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google'
]

# SOCIAL_ACCOUNT_PROVIDERS = {
#     "google" : {
#         "SCOPE" :[
#             "profile",
#             "email"
#         ],
#         "AUTH_PARAMS" : { "access_type" : "online"}
#     }
# }        

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)
MEDIA_URL = '/media/'  # URL to access media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    # 'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'interview_bot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'interview_bot.wsgi.application'
ASGI_APPLICATION = 'interview_bot.asgi.application'
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [("localhost", 6380)],
#         },
#     },
# }

# CELERY_BROKER_URL = "redis://localhost:6380"
# CELERY_RESULT_BACKEND = "redis://localhost:6380"
# CELERY_ACCEPT_CONTENT = ['application/json']
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TASK_SELERLIZER = 'json'
# CELERY_RESULT_EXPIRES = 60 * 60 * 24
# broker_connection_retry_on_startup = True
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME':'interviewbot',
#         'USER' : 'root',
#         'PASSWORD' :  '7760',
#         'HOST' : 'localhost',
#         'PORT' : '3306'
#     }
# # }
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",
#     },
# }
# Near the top of settings.py with other env configuration

# Replace your current CHANNEL_LAYERS configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": ['redis://default:OFRYIVyBbJnyJCXLYpZMetUmYlsRbzrL@junction.proxy.rlwy.net:19915'],
        },
    }
}
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Optional: Additional directories for static files
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # Directory where static files are collected
# AUTHENTICATION_BACKENDS = {
#     "django.contrib.auth.backends.ModelBackend",
#     "allauth.account.auth_backends.AuthenticationBackend"
# }
# LOGIN_REDIRECT_URL="/"
# LOGOUT_REDIRECT_URL="/"
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # or your email provider
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'tester7760775061@gmail.com'
EMAIL_HOST_PASSWORD = 'mamb mymj uuus gcbh'
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_URL = 'logout'
LOGOUT_REDIRECT_URL = 'login'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]
CELERY_BROKER_URL = "redis://127.0.0.1:6380"
CELERY_RESULT_BACKEND = "redis://127.0.0.1:6380"
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SELERLIZER = 'json'
CELERY_RESULT_EXPIRES = 60 * 60 * 24
broker_connection_retry_on_startup = True
# SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
# SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')
POSTGRES_LOCALLY = True
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
# Read the .env file

# Database configuration
if ENVIRONMENT == 'production' or POSTGRES_LOCALLY:
    try:
        DATABASES = {
            'default': dj_database_url.parse('postgresql://postgres:wmhTLcmKsiYzpCNOWakeKmcwEnCCGqsD@junction.proxy.rlwy.net:36471/railway')
        }
    except Exception as e:
        print(f"Error connecting to PostgreSQL: {e}")
        # Fallback to SQLite
       
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }